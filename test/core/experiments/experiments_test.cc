// Copyright 2023 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Auto generated by tools/codegen/core/gen_experiments.py

#include <grpc/support/port_platform.h>

#include "src/core/lib/experiments/experiments.h"

#include "gtest/gtest.h"

#ifndef GRPC_EXPERIMENTS_ARE_FINAL

bool GetExperimentTcpFrameSizeTuningExpectedValue() { return false; }

bool GetExperimentTcpRcvLowatExpectedValue() { return false; }

bool GetExperimentPeerStateBasedFramingExpectedValue() { return false; }

bool GetExperimentMemoryPressureControllerExpectedValue() { return false; }

bool GetExperimentUnconstrainedMaxQuotaBufferSizeExpectedValue() {
  return false;
}

bool GetExperimentEventEngineClientExpectedValue() { return false; }

bool GetExperimentMonitoringExperimentExpectedValue() { return true; }

bool GetExperimentPromiseBasedClientCallExpectedValue() { return false; }

bool GetExperimentFreeLargeAllocatorExpectedValue() { return false; }

bool GetExperimentPromiseBasedServerCallExpectedValue() { return false; }

bool GetExperimentTransportSuppliesClientLatencyExpectedValue() {
  return false;
}

bool GetExperimentEventEngineListenerExpectedValue() { return false; }

bool GetExperimentScheduleCancellationOverWriteExpectedValue() { return false; }

bool GetExperimentTraceRecordCallopsExpectedValue() { return false; }

bool GetExperimentEventEngineDnsExpectedValue() { return false; }

bool GetExperimentWorkStealingExpectedValue() { return false; }

bool GetExperimentClientPrivacyExpectedValue() { return false; }

bool GetExperimentCanaryClientPrivacyExpectedValue() { return false; }

bool GetExperimentServerPrivacyExpectedValue() { return false; }

TEST(ExperimentsTest, CheckExperimentValuesTest) {
  ASSERT_EQ(grpc_core::IsTcpFrameSizeTuningEnabled(),
            GetExperimentTcpFrameSizeTuningExpectedValue());

  ASSERT_EQ(grpc_core::IsTcpRcvLowatEnabled(),
            GetExperimentTcpRcvLowatExpectedValue());

  ASSERT_EQ(grpc_core::IsPeerStateBasedFramingEnabled(),
            GetExperimentPeerStateBasedFramingExpectedValue());

  ASSERT_EQ(grpc_core::IsMemoryPressureControllerEnabled(),
            GetExperimentMemoryPressureControllerExpectedValue());

  ASSERT_EQ(grpc_core::IsUnconstrainedMaxQuotaBufferSizeEnabled(),
            GetExperimentUnconstrainedMaxQuotaBufferSizeExpectedValue());

  ASSERT_EQ(grpc_core::IsEventEngineClientEnabled(),
            GetExperimentEventEngineClientExpectedValue());

  ASSERT_EQ(grpc_core::IsMonitoringExperimentEnabled(),
            GetExperimentMonitoringExperimentExpectedValue());

  ASSERT_EQ(grpc_core::IsPromiseBasedClientCallEnabled(),
            GetExperimentPromiseBasedClientCallExpectedValue());

  ASSERT_EQ(grpc_core::IsFreeLargeAllocatorEnabled(),
            GetExperimentFreeLargeAllocatorExpectedValue());

  ASSERT_EQ(grpc_core::IsPromiseBasedServerCallEnabled(),
            GetExperimentPromiseBasedServerCallExpectedValue());

  ASSERT_EQ(grpc_core::IsTransportSuppliesClientLatencyEnabled(),
            GetExperimentTransportSuppliesClientLatencyExpectedValue());

  ASSERT_EQ(grpc_core::IsEventEngineListenerEnabled(),
            GetExperimentEventEngineListenerExpectedValue());

  ASSERT_EQ(grpc_core::IsScheduleCancellationOverWriteEnabled(),
            GetExperimentScheduleCancellationOverWriteExpectedValue());

  ASSERT_EQ(grpc_core::IsTraceRecordCallopsEnabled(),
            GetExperimentTraceRecordCallopsExpectedValue());

  ASSERT_EQ(grpc_core::IsEventEngineDnsEnabled(),
            GetExperimentEventEngineDnsExpectedValue());

  ASSERT_EQ(grpc_core::IsWorkStealingEnabled(),
            GetExperimentWorkStealingExpectedValue());

  ASSERT_EQ(grpc_core::IsClientPrivacyEnabled(),
            GetExperimentClientPrivacyExpectedValue());

  ASSERT_EQ(grpc_core::IsCanaryClientPrivacyEnabled(),
            GetExperimentCanaryClientPrivacyExpectedValue());

  ASSERT_EQ(grpc_core::IsServerPrivacyEnabled(),
            GetExperimentServerPrivacyExpectedValue());
}

#endif  // GRPC_EXPERIMENTS_ARE_FINAL

int main(int argc, char** argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
